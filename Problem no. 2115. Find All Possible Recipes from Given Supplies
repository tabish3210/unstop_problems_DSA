PROBLEM NUMBER          :-         2115. Find All Possible Recipes from Given Supplies


// Date : 21 Mar 2025

// DFS

class Solution {
public:
    vector<string> findAllRecipes(vector<string>& recipes, vector<vector<string>>& ingredients, vector<string>& supplies) {
        unordered_set<string> available_supplies(supplies.begin(), supplies.end());
        unordered_map<string, vector<string>> recipe_to_ingredients;
        unordered_map<string, int> visited;
        vector<string> result;
        
        for (size_t i = 0; i < recipes.size(); i++) {
            recipe_to_ingredients[recipes[i]] = ingredients[i];
        }
        
        function<bool(string)> can_make = [&](string recipe) {
            if (visited.count(recipe)) {
                return visited[recipe] == 1;
            }
            
            if (available_supplies.count(recipe)) {
                return true;
            }
            
            if (!recipe_to_ingredients.count(recipe)) {
                return false;
            }
            
            visited[recipe] = 0;
            
            for (const string& ingredient : recipe_to_ingredients[recipe]) {
                if (!can_make(ingredient)) {
                    visited[recipe] = -1;
                    return false;
                }
            }
            
            visited[recipe] = 1;
            result.push_back(recipe);
            return true;
        };
        
        for (const string& recipe : recipes) {
            can_make(recipe);
        }
        
        return result;
    }
};

//////////////////////////////////////////////////////////////////////////////////////////


// Method 2nd

// BFS (Kahnâ€™s Algorithm for Topological Sorting)

/*

    #include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    vector<string> findAllRecipes(vector<string>& recipes, vector<vector<string>>& ingredients, vector<string>& supplies) {
        unordered_map<string, vector<string>> graph; // ingredient -> recipes
        unordered_map<string, int> indegree; // recipe -> count of required ingredients
        unordered_set<string> available(supplies.begin(), supplies.end());
        vector<string> result;

        // Step 1: Build graph and indegree map
        for (int i = 0; i < recipes.size(); i++) {
            string recipe = recipes[i];
            indegree[recipe] = ingredients[i].size();

            for (string& ing : ingredients[i]) {
                graph[ing].push_back(recipe);
            }
        }

        // Step 2: Perform BFS
        queue<string> q(supplies.begin(), supplies.end());

        while (!q.empty()) {
            string item = q.front();
            q.pop();
            if (!graph.count(item)) continue;

            for (string& recipe : graph[item]) {
                indegree[recipe]--;
                if (indegree[recipe] == 0) {
                    result.push_back(recipe);
                    q.push(recipe);
                }
            }
        }

        return result;
    }
};

*/
